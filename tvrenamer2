#!/usr/bin/python
# coding=latin1
# TV Renamer v2.15
# (C) Copyright 2007-2010 Perry Lorier
#
# Latest version can be downloaded from
#  http://github.com/isomer/tvrenamer/tree/master
#
# 2.1
#  * Fixed truncated show names
#  * Added support for --title argument
# 2.2 (2007-02-05)
#  * Add support for --name for shows that have different UK/US names
# 2.3 (2007-06-13)
#  * Fix episode with "1x01" in them that aren't prefixed with a space
# 2.4 (2007-07-01)
#  * Consider a variety of formats when looking up episode names, in
#    particular ones that are "reimagined" series.
#  * More liberal parsing of the epguides page
# 2.5 (2008-01-24)
#  * Add new patterns
# 2.6 (2008-06-16)
#  * Cleaned up patterns to be more strict about matching.
# 2.7 (2008-09-29)
#  * Made code nicer for parsing the output
# 2.8 (2008-10-05)
#  * Deal with e7-'s naming conventions.  Sigh
# 2.9 (2008-11-04)
#  * support "ffn" prefix for people that like dotted names.
# 2.10 (2008-12-18)
#  * Deal with epguides latin1 encodings.
# 2.11 (2009-11-17)
#  * Correctly parse epguides when there are more than 9 seaons
# 2.12 (2009-12-09)
#  * Add support for ~/.tvrenamerrc
#  * Add support for input_mapping
#  * Ignore directories
# 2.13 (2009-12-09)
#  * Fix very broken config parser
# 2.14 (2009-12-12)
#  * Extend episode pattern matches
# 2.15 (2010-01-14)
#  * Updated screen scraping regex
#  * Made ~/.tvrenamerrc case insensative on matching
# 2.16 (2010-02-01)
#  * Merged more patterns from etiam
#  * Added config file support for overriding expandos
# 2.17 (2010-03-19)
#  * Add support for "origname" and "origext" expandos
#  * Add support for ~/.tvrenamerlog
#  * Add support for "lc" prefixes on expandos to lowercase things
#
# Config entries understood:
#
#  input_mapping /regex/ name
#
#   provide a regex that modifies a series name to a new name known by epguides
#   eg: input_mapping /HouseMD/ House
#
#  format expando
# 
#   provide a default expando

import urllib
import sys
import re
import os
import getopt
import glob
import pickle
import htmlentitydefs
import time

# Load the tvrenamer cache
def load_cache():
	fname=os.path.expanduser("~/.tvrenamercache")
	try:
		return pickle.load(open(fname,"r"))
	except:
		return {}
	
def save_cache(series_info):
	fname=os.path.expanduser("~/.tvrenamercache")
	try:
		pickle.dump(series_info,open(fname,"w"))
	except:
		raise
		pass

logfile=None
def log(msg,*args):
	global logfile
	msg = msg % args
	if not logfile:
		logfile = open(os.path.expanduser("~/.tvrenamerlog"),"a")
	logfile.write("%s: %s\n" % (time.strftime("%Y-%m-%d %H:%M:%S %Z"),msg))
	

series_loaded_this_session=[]
noact=0
debug=0

expando="%(fntitle)s - %(season)ix%(ep)02i - %(fnname)s.%(ext)s"

seriesname = r"(?:e7-)?(?P<series>.*?)"
seperator = r"(?:[^A-Za-z0-9]|%20) *-? *"
prefix = seriesname + seperator
ext = r".*\.(?P<ext>[^.]+)$"

patterns=[
	# seasonseasonEepisodeepisode
	prefix+r'[Ss]? *(?P<season>[0-9][0-9])[Eex](?P<ep>[0-9]+)'+ext,
	# seasonEepisodeepisode
	prefix+r'[Ss]? *(?P<season>[0-9])[Eex](?P<ep>[0-9]+)'+ext,
	# seasonseasonepisodeepisode
	prefix+r'[Ss]? *(?P<season>[0-9][0-9])(?P<ep>[0-9][0-9])'+ext,
	# seasonepisodeepisode
	prefix+r'[Ss]? *(?P<season>[0-9])(?P<ep>[0-9][0-9])'+ext,
	# seasonseason.episodeepisode
	prefix+r'[Ss]? *(?P<season>[0-9][0-9])\.(?P<ep>[0-9][0-9])'+ext,
	# season.episodeepisode
	prefix+r'[Ss]? *(?P<season>[0-9])\.(?P<ep>[0-9][0-9])'+ext,
	# Sseasonseason episodeepisode
	prefix+r'[Ss](?P<season>[0-9]+) ?[Ee](?P<ep>[0-9]+)'+ext,
	# Sseasonseason.Eepisodeepisode
	prefix+r'[Ss](?P<season>[0-9]+).[Ee](?P<ep>[0-9]+)'+ext,
	# Sseasonseason-episodeepisode
	prefix+r'[Ss](?P<season>[0-9]+)-(?P<ep>[0-9]+)'+ext,
	# seasonseason-episodeepisode
	prefix+r'(?P<season>[0-9]+)-(?P<ep>[0-9]+)'+ext,
	# Season season - Episode episodeepisode
	prefix+r'Season *(?P<season>[0-9])'+seperator+'Episode *(?P<ep>[0-9]+)'+ext,
	# seasonepisodeepisode
	r'(?P<season>[0-9])(?P<ep>[0-9][0-9])'+seperator+ext,
]

def unhtmlspecialchars(txt):
    "Remove &entities; from HTML"
    try:
	    txt = txt.decode("utf8") # turn into a unicode str
    except UnicodeDecodeError, e:
    	txt = txt.decode("latin1","replace") # try again, ignoring errors
    def get_entity_char(match):
        """returns a unicode encoded char string for a given html entity
        (eg '&#167;' -> u'§', '&eacute;' -> u'é ')"""
	entity = match.group(1)
        if not entity.startswith("&#"): 
            # it's a named entity
            try:
                entity = htmlentitydefs.entitydefs[entity[1:-1]].decode("latin1")
            except:
                # someone has used a non-standard entity name, or made a typo?
                pass
            # we now either have a unicode char, or another html entity if
            # it was a char not in latin1...   
        if entity.startswith("&#"):  
            # Numeric Character Reference
            code = entity[2:-1] # ignore leading &# and trailing ;
            if code[0] in ('x','X'): # hex
                return unichr(int(code[1:], 16))
            return unichr(int(code))
        return entity

    ret = re.sub("(&#?[A-Za-z0-9]+;)", get_entity_char, txt)
    return ret.encode('utf8')

input_mapping = []
output_mapping = []
def parse_config():
	global expando
	fname=os.path.expanduser("~/.tvrenamerrc")
	if not os.path.exists(fname):
		return
	f = open(fname,"r")
	for i in f:
		line = i.strip()
		if line=="" or line.startswith("#"):
			continue
		keyword,args = line.split(" ",1)
		if keyword == "input_mapping":
			m=re.match(r"/([^/]*)/ *(.*)",args)
			if not m:
				print ("invalid syntax for input_mapping argument %s" % (args))
				sys.exit(1)
			else:
				input_mapping.append((m.group(1),m.group(2)))
		elif keyword == "output_mapping":
			m=re.match(r"/([^/]*)/ *(.*)",args)
			if not m:
				print ("invalid syntax for output_mapping argument %s" % (args))
				sys.exit(1)
			else:
				output_mapping.append((m.group(1),m.group(2)))
		elif keyword == "format":
			expando = args
		else:
			print "Unknown config option %r, ignoring" % keyword
			continue
	f.close()


def fetchpage(title):
	url='http://epguides.com/%s/' % title

	if debug:
		print "DEBUG: Fetching %s" % `url`

	epdisplaytitle = ""
	a=urllib.urlopen(url)
	f=[x.split('\r') for x in a.readlines()]
	ff=reduce(lambda a,b:a+b,f)
	flag=1
	data={}
	suggest=None
	for i in ff:
		i=i.strip()
		a=re.match(r'.*<meta http-equiv="refresh" content="[0-9]+; url=http://epguides.com/(.*)">.*',i,re.IGNORECASE)
		if a:
			suggest=a.groups()[0]
		if "<pre>" in i:
			flag=1
		if "</pre>" in i:
			flag=0
		if i.startswith("<title>"):
			flag=2
			i=i[len("<title>"):]
		newflag=flag
		if i.endswith("</title>"):
			newflag=0
			i=i[:-(len("<title>")+1)]
		if flag==1:
			prefix=r"^(?:.*\.|<li>|[0-9]+)"
			a=re.match(prefix+r' +([0-9]+|S)- *([0-9]+).*["\']>(.*)</a>',i)
			# Sometimes they aren't linked
			if not a:
				a=re.match(prefix+r' +([0-9]+|S)- *([0-9]+).*[0-9][0-9]  (.*)',i)
			if a:
				if a.groups()[0]!="S":
					season=int(a.groups()[0])
				else:
					season=a.groups()[0]
				ep=int(a.groups()[1])
				if not data.has_key(season):
					data[season]={}
				data[season][ep]=unhtmlspecialchars(a.groups()[2])
				if debug:
					print "DEBUG: Found:",repr(season),repr(ep),repr(data[season][ep])
			else:
				if debug and i!="":
					print "DEBUG: Unmatched line",`i`
		elif flag==2:
			if i.strip()!='':
				if re.match(r"^(.*) *\(.*\)",i):
					i=re.match(r"^(.*) *\(.*\)",i).groups()[0].strip()
				epdisplaytitle=" ".join([
					epdisplaytitle,
					unhtmlspecialchars(i),
					]).strip()
		flag=newflag
	if data=={} and suggest:
		if debug:
			print "DEBUG: Redirecting to",`suggest`
		return fetchpage(suggest)
	if data=={}:
		if debug:
			print "DEBUG: No data found"
		return None
	return epdisplaytitle,data

def rename(f,t):
	"Attempt to rename a file, produce an error if it cannot be renamed, or if the destination exists to stderr, but dont raise an exception"
	if f==t:
		if debug:
			print "DEBUG: File already renamed %r" % f
		return
	print "%s: %s" % (os.path.basename(f),os.path.basename(t))
	if noact:
		return
	if os.access(t,os.F_OK):
		print >>sys.stderr,"Destination exists"
		log("EXISTS %s: %s",os.path.realpath(f),os.path.realpath(t))
		return
	try:
		os.rename(f,t)
		log("RENAME %s: %s",os.path.realpath(f),os.path.realpath(t))
	except OSError,e:
		log("FAIL %s: %s",os.path.realpath(f),os.path.realpath(t))
		print e

# A lot of filesystems don't deal well with weird charactors, so strip
# them out
def fix_name(fname):
	"Strip charactors from filenames that cause filesystems issues"
	for i in "?:*+/\\"+"".join([chr(x) for x in range(32)])+"".join([chr(x) for x in range(128,256)]):
		fname=fname.replace(i," ")
	while "  " in fname:
		fname=fname.replace("  "," ")
	fname=fname.strip()
	return fname

def extreme_fix_name(fname):
	"Strip all non alphanumeric from name, replace ' ' with '.'"
	fname=re.sub("\+"," plus ",fname)
	fname=re.sub("&"," and ",fname)
	fname=re.sub("  +"," ",fname)
	fname=re.sub("[^A-Za-z0-9 ]","",fname)
	fname=fname.replace(' ','.')
	return fname

def parse_filename(fname):
	"fname -> seriesname,seasonnum,epnum,ext"
	# remove things that look like dates
	fname=re.sub(r'[-/]20[0-9]','',fname)
	fname=re.sub(r'[-/]19[789][0-9]','',fname)
	# Now match it against known patterns
	for i in patterns:
		a=re.match(i,fname)
		if a: 
			try:
				name = a.group('series')
			except IndexError:
				name = ''
			season=a.group('season')
			episode=a.group('ep')
			ext=a.group('ext')
			if debug:
				print "DEBUG: filename:",`fname`
				print "DEBUG: pattern:",`i`
				print "DEBUG: Name:",`name`
				print "DEBUG: Season:",`season`
				print "DEBUG: Episode:",`episode`
				print "DEBUG: Extension:",`ext`
			if re.match(r"^the[^a-z]",name.lower()):
				if debug:
					print "DEBUG: stripping 'the' prefix"
				name=name[3:]
			if name.lower().endswith(", the"):
				if debug:
					print "DEBUG: stripping ', the' suffix"
				name=name[:-5]
			if debug:
				print "DEBUG: final name:",`name`
			return (
				re.sub(r"[^A-Za-z0-9]","",name),
				int(season),
				int(episode),
				ext)
	# The filename follows no known pattern.
	return None

# Series patterns
# Taking a name of a series, try and extrapolate what it might be called
def series_patterns(name):
	ret=[]
	# Try the raw series name
	ret.append(name)
	# Dates at the end might indicate that this series has two runs 
	# from different dates.
	if re.match(r"^(19[5-9][0-9]|20[0-1][0-9])$",name[-4:]):
		ret.append(name[:-4]+"_"+name[-4:])
		ret.append(name[:-4])

	return ret

def find_series_name(series_name):
	# Try matching it to a series name
	for match,replace in input_mapping:
		if debug:
			print "DEBUG: checking %s vs %s" % (series_name,match)
		m = re.match(match, series_name, re.IGNORECASE)
		if m:
			if debug:
				print "DEBUG: input_mapping %s -> %s" % (series_name,match)
			series_name = replace
			break
	# Search to see if we can find something in our cache that
	# looks like it matches
	for name2 in series_patterns(series_name):
		if debug:
			print "DEBUG: Considering",`name2`
		if series_info.has_key(name2) \
			and series_info[name2] is not None:
				return name2
	# Ok, try fetching pages for names we don't know about
	for name2 in series_patterns(series_name):
		series_info[name2]=fetchpage(name2)
		series_loaded_this_session.append(name2)
		if series_info[name2] is not None:
			return name2
	# Give up and return our current series_name
	return series_name

def process_file(fname,title,outname):
	f=os.path.realpath(fname)
	dirn=os.path.dirname(f)
	fname=os.path.basename(f)
	origname=fname

	ret=parse_filename(fname)

	if not ret:
		print >>sys.stderr,"can't determine episode number:",i
		return

	name,season,episode,ext = ret

	if title is not None:
		name=re.sub(r"[^A-Za-z0-9_]","",title)

	# Because of the cache, we might not have the information, so we
	# may want to run this again if we can't find the information we're
	# looking for.
	while 1:
		name = find_series_name(name)

		if not series_info.has_key(name) \
			or series_info[name] is None:
				print >>sys.stderr,"couldn't determine series name: %s (%s)" % (i,name)
				return

		title,data = series_info[name]

		if season not in data:
			if name not in series_loaded_this_session:
				del series_info[name]
				continue
			print >>sys.stderr,"Unknown season:",season,":",i
			return

		if episode not in data[season]:
			# Reload the cache for this series since it's possibly
			# stale.
			if name not in series_loaded_this_session:
				del series_info[name]
				continue
			print >>sys.stderr,"Unknown episode: s%02ie%02i: %s" % ( 
							season,
							episode,
							i)
			return

		break

	if outname is not None:
		title=outname

	# Standard expandos
	expando_values={
			"title" : title,
			"season" :season,
			"ep" : episode,
			"name" : data[season][episode],
			"origname" : os.path.splitext(origname)[0],
			"origext" : os.path.splitext(origname)[1],
			"ext" : ext,
			}
	more_expandos=[]
	# Prefixes:
	#  lc -- lower case
	#  fn -- fixed for filesystem issues (sigh)
	#  ffn -- extremely fixed, A-Za-z and . 
	#  fnlc -- fn+lc
	#
	# eg:
	#  title == "Fish & Chips"
	#  lctitle == "fish & chips"
	#  fntitle == "Fish and Chips"
	#  fnlctitle == "fish and chips"
	#  ffntitle == "Fish.and.Chips"
	#  ffnlctitle == "fish.and.chips"
	for k,v in expando_values.items():
		if type(v) == type("") or type(v) == type(u""):
			more_expandos.append(("fn"+k,fix_name(v)))
			more_expandos.append(("ffn"+k,extreme_fix_name(v)))
			more_expandos.append(("lc"+k,v.lower()))
			more_expandos.append(("fnlc"+k,fix_name(v.lower())))
			more_expandos.append(("ffnlc"+k,extreme_fix_name(v.lower())))
	expando_values.update(dict(more_expandos))
	try:
		fname=expando % expando_values
	except KeyError, e:
		print >>sys.stderr,"Unknown expando %s, known expandos: %s" % (",".join(e.args),",".join(expando_values.keys()))
		sys.exit(1)
	# Just for good luck
	fname=fname.strip()
	fname=os.path.join(dirn,fname)
	rename(f,fname)

def usage(argv0):
	print "usage: %s [-n|--no-act] [--format=format] [--title=title] files...." % argv0
	print
	print "Renames files to their epguides.com name"
	print
	print "-n"
	print "--no-act		Don't actually rename the files, just display what"
	print "			what would be done"
	print
	print "--format=%s" % repr(expando)
	print "			Format to rename to"
	print
	print "--title=title	The name of the show (overrides autodetection)"
	print
	print "--name=title	The name of the show to use in filenames"
	print 
	print "--expand		Expand globs internally"
	print "--no-expand	Don't expand globs internally"
	sys.exit(1)

if __name__=="__main__":
	try:
		args,files=getopt.gnu_getopt(sys.argv[1:],"nh",[
			"no-act","format=","help","title=","expand","no-expand",
			"name=","debug",
			])
	except getopt.GetoptError, e:
		print e
		usage(sys.argv[0])

	if len(files)<1:
		usage(sys.argv[0])

	expand_glob = os.name!="posix"

	title=None
	name=None

	for opt,arg in args:
		if opt in ["-n","--no-act"]:
			noact=1
		elif opt in ["--format"]:
			expando=arg
		elif opt in ["--title"]:
			title=arg
		elif opt in ["--name"]:
			name=arg
		elif opt in ["--expand"]:
			expand_glob=1
		elif opt in ["--no-expand"]:
			expand_glob=0
		elif opt in ["-h","--help"]:
			usage(sys.argv[0])
		elif opt in ["--debug"]:
			debug=1
		elif opt in ["--parsable"]:
			parsable=1
		else:
			print "Unknown option %s" % `opt`
			usage(sys.argv[0])

	series_info=load_cache()

	parse_config()

	if expand_glob:
		files=reduce(lambda a,b:a+b,[glob.glob(file) for file in files])

	for i in files:
		if os.path.isdir(i):
			if debug:
				print "DEBUG: Ignoring directory %r" % i
			continue
		process_file(i,title,name)

	save_cache(series_info)
